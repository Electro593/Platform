BasedOnStyle: LLVM
# AccessModifierOffset:
AlignAfterOpenBracket: BlockIndent
AlignArrayOfStructures: Right
AlignConsecutiveAssignments:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
  AlignCompound: true
  PadOperators: true
AlignConsecutiveBitFields:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
AlignConsecutiveDeclarations:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
  AlignFunctionDeclarations: true
  AlignFunctionPointers: false
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: true
AlignConsecutiveShortCaseStatements:
  Enabled: true
  AcrossEmptyLines: true
  AcrossComments: true
  # AlignCaseArrows:
  AlignCaseColons: true
# AlignConsecutiveTableGenBreakingDAGArgColons:
# AlignConsecutiveTableGenCondOperatorColons:
# AlignConsecutiveTableGenDefinitionColons:
AlignEscapedNewlines: LeftWithLastLine
AlignOperands: AlignAfterOperator
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0
AllowAllArgumentsOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false
# AllowBreakBeforeNoexceptSpecifier:
AllowShortBlocksOnASingleLine: Always
# AllowShortCaseExpressionsOnASingleLine:
AllowShortCaseLabelsOnASingleLine: true
# AllowShortCompoundRequirementOnASingleLine:
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: true
AllowShortIfStatementsOnASingleLine: AllIfsAndElse
# AllowShortLambdasOnASingleLine:
AllowShortLoopsOnASingleLine: true
# AllowShortNamespacesOnASingleLine:
AlwaysBreakBeforeMultilineStrings: true
# AttributeMacros:
BinPackArguments: false
BinPackParameters: OnePerLine
BitFieldColonSpacing: Both
# BraceWrapping:
BracedInitializerIndentWidth: 4
BreakAdjacentStringLiterals: true
# BreakAfterAttributes:
# BreakAfterJavaFieldAnnotations:
BreakAfterReturnType: AllDefinitions
# BreakArrays:
BreakBeforeBinaryOperators: All
BreakBeforeBraces: Linux
# BreakBeforeConceptDeclarations:
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTernaryOperators: true
BreakBinaryOperations: RespectPrecedence
# BreakConstructorInitializers:
# breakInheritanceList:
BreakStringLiterals: true
# BreakTemplateDeclarations:
ColumnLimit: 110
# CommentPragmas:
# CompactNamespaces:
# ConstructorInitializerIndentWidth:
ContinuationIndentWidth: 4
# Cpp11BracedStyle:
DerivePointerAlignment: false
DisableFormat: false
# EmptyLineAfterAccessModifier:
# EmptyLineBeforeAccessModifier:
# FixNamespaceComments:
# ForEachMacros:
# IfMacros:
IncludeBlocks: Preserve
# IncludeCategories:
# IncludeIsMainRegex:
# IncludeIsMainSourceRegex:
# IndentAccessModifiers:
IndentCaseBlocks: false
IndentCaseLabels: true
# IndentExportBlock:
# IndentExternBlock:
IndentGotoLabels: true
IndentPPDirectives: None
# IndentRequiresClause:
IndentWidth: 4
IndentWrappedFunctionNames: false
InsertBraces: false
InsertNewlineAtEOF: true
InsertTrailingCommas: Wrapped
# IntegerLiteralSeparator:
# JavaImportGroups:
# JavaScriptQuotes:
# JavaScriptWrapImports:
KeepEmptyLines:
  AtStartOfFile: false
  AtStartOfBlock: false
  AtEndOfFile: false
KeepFormFeed: false
# LambdaBodyIndentation:
# Language:
# LineEnding:
# MacroBlockStart:
# MacroBlockEnd:
# Macros:
# MainIncludeChar:
MaxEmptyLinesToKeep: 1
# NamespaceIndentation:
# NamespaceMacros:
# ObjCBinPackProtocolList:
# ObjCBlockIndentWidth:
# ObjCBreakBeforeNestedBlockParam:
# ObjCPropertyAttributeOrder:
# ObjCSpaceAfterProperty:
# ObjCSpaceBeforeProtocolList:
PPIndentWidth: -1
# PackConstructorInitializers:
# PenaltyBreakAssignment:
# PenaltyBreakBeforeFirstCallParameter:
# PenaltyBreakBeforeMemberAccess:
# PenaltyBreakComment:
# PenaltyBreakFirstLessLess:
# PenaltyBreakOpenParenthesis:
# PenaltyBreakScopeResolution:
# PenaltyBreakString:
# PenaltyBreakTemplateDeclaration:
# PenaltyExcessCharacter:
# PenaltyIndentedWhitespace:
# PenaltyReturnTypeOnItsOwnLine:
PointerAlignment: Right
QualifierAlignment: Custom
QualifierOrder: [restrict, volatile, static, inline, const, constexpr, friend, type]
# RawStringFormats:
# ReferenceAlignment:
ReflowComments: Always
RemoveBracesLLVM: true
RemoveEmptyLinesInUnwrappedLines: true
RemoveParentheses: ReturnStatement
RemoveSemicolon: true
# RequiresClausePosition:
# RequiresExpressionIndentation:
# SeparateDefinitionBlocks:
# ShortNamespaceLines:
SkipMacroDefinitionBody: true
SortIncludes: Never
# SortJavaStaticImport:
# SortUsingDeclarations:
SpaceAfterCStyleCast: true
SpaceAfterLogicalNot: false
# SpaceAfterTemplateKeyword:
SpaceAroundPointerQualifiers: Before
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
# SpaceBeforeCpp11BracedList:
# SpaceBeforeCtorInitializerColon:
# SpaceBeforeInheritanceColon:
# SpaceBeforeJsonColon:
SpaceBeforeParens: ControlStatements
# SpaceBeforeRangeBasedForLoopColon:
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: true
SpacesBeforeTrailingComments: 2
# SpacesInAngles:
SpacesInContainerLiterals: true
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: 1
SpacesInParens: Custom
SpacesInParensOptions:
  ExceptDoubleParentheses: true
  InConditionalStatements: false
  InCStyleCasts: false
  InEmptyParentheses: false
  Other: false
SpacesInSquareBrackets: false
# Standard:
StatementAttributeLikeMacros: [global, persist, internal, external]
StatementMacros: []
TabWidth: 4
# TableGenBreakInsideDAGArg:
# TableGenBreakingDAGArgOperators:
# TemplateNames:
TypeNames: []
TypenameMacros: []
UseTab: Always
# VariableTemplates:
# VerilogBreakBetweenInstancePorts:
# WhitespaceSentitiveMacros:
# WrapNamespaceBodyWithEmptyLines:
